// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  password  String
  role      String   @default("USER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  events    Event[]
  posts     Post[]
}

model Event {
  id        Int      @id @default(autoincrement())
  title     String
  type      String
  date      DateTime
  time      String
  platform  String?
  status    String   @default("SCHEDULED")
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model Post {
  id         Int      @id @default(autoincrement())
  title      String
  content    String?
  mediaUrl   String?
  platforms  String[]
  publishAt  DateTime
  status     String   @default("DRAFT")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  statistics Json?
}

model SocialAccount {
  id           String   @id @default(cuid())
  platform     String
  username     String
  followers    Int      @default(0)
  lastUpdated  DateTime @default(now())
}

model CalendarEvent {
  id          String    @id @default(cuid())
  title       String
  date        DateTime
  time        String
  endTime     String?
  platform    String?
  contentType String?
  description String
  color       String
  location    String?
  isRecurring Boolean   @default(false)
  people      String[]  // IDs de las personas como array de strings
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      Int?
  user        User?     @relation(fields: [userId], references: [id])
}

model Idea {
  id          String    @id @default(cuid())
  title       String
  description String
  platform    String
  tags        String[]  // Tags como array de strings
  status      String    // "pending", "in-progress", "completed"
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      Int?
  user        User?     @relation(fields: [userId], references: [id])
} 